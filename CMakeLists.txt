# CMAKE_MINIMUM_REQUIRED(VERSION 3.12 FATAL_ERROR)
# PROJECT(app CXX)

# IF(MSVC)
#     SET(CMAKE_GENERATOR_PLATFORM win64)
# ENDIF()

# SET(CMAKE_CXX_STANDARD 17)

# SET(VTK_DIR "${CMAKE_CURRENT_SOURCE_DIR}/External/VTK")

# # 尝试先找到系统上的VTK
# FIND_PACKAGE(VTK COMPONENTS
#   CommonColor
#   CommonCore
#   CommonDataModel
#   FiltersCore
#   FiltersSources
#   FiltersGeometry
#   IOLegacy
#   IOXML
#   InteractionStyle
#   RenderingAnnotation
#   RenderingContextOpenGL2
#   RenderingCore
#   RenderingFreeType
#   RenderingGL2PSOpenGL2
#   RenderingOpenGL2 QUIET
# )

# IF(NOT VTK_FOUND)
#   MESSAGE(STATUS "VTK not found. Configuring VTK from the External/VTK directory.")
# ENDIF()

# # Prevent a "command line is too long" failure in Windows.
# SET(CMAKE_NINJA_FORCE_RESPONSE_FILE "ON" CACHE BOOL "Force Ninja to use response files.")
# SET(CMAKE_EXPORT_COMPILE_COMMANDS ON)
# INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/External)
# INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/include)

# ADD_DEFINITIONS(-D_CMAKE)
# ADD_DEFINITIONS(-D_CRT_NONSTDC_NO_WARNINGS)

# FILE(GLOB PROJECT_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/include/*.h ${CMAKE_CURRENT_SOURCE_DIR}/include/*.hpp)
# FILE(GLOB PROJECT_SOURCES src/*.cpp)

# SOURCE_GROUP("Headers" FILES ${PROJECT_HEADERS})
# SOURCE_GROUP("Sources" FILES ${PROJECT_SOURCES})

# ADD_EXECUTABLE(${PROJECT_NAME} ${PROJECT_HEADERS} ${PROJECT_SOURCES})

# TARGET_LINK_LIBRARIES(${PROJECT_NAME} PRIVATE ${VTK_LIBRARIES})
# vtk_module_autoinit(
#     TARGETS ${PROJECT_NAME}
#     MODULES ${VTK_LIBRARIES}
#   )
CMAKE_MINIMUM_REQUIRED(VERSION 3.12 FATAL_ERROR)
PROJECT(app CXX)

IF(MSVC)
    SET(CMAKE_GENERATOR_PLATFORM win64)
ENDIF()

SET(CMAKE_CXX_STANDARD 17)

SET(VTK_DIR "${CMAKE_CURRENT_SOURCE_DIR}/External/VTK")

# Find VTK
FIND_PACKAGE(VTK COMPONENTS
  CommonColor
  CommonCore
  CommonDataModel
  FiltersCore
  FiltersSources
  FiltersGeometry
  IOLegacy
  IOXML
  InteractionStyle
  RenderingAnnotation
  RenderingContextOpenGL2
  RenderingCore
  RenderingFreeType
  RenderingGL2PSOpenGL2
  RenderingOpenGL2 QUIET
)

IF(NOT VTK_FOUND)
  MESSAGE(STATUS "VTK not found. Configuring VTK from the External/VTK directory.")
ENDIF()

# Find MPI
FIND_PACKAGE(MPI REQUIRED)

# Prevent a "command line is too long" failure in Windows.
SET(CMAKE_NINJA_FORCE_RESPONSE_FILE "ON" CACHE BOOL "Force Ninja to use response files.")
SET(CMAKE_EXPORT_COMPILE_COMMANDS ON)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/External)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/include)
INCLUDE_DIRECTORIES(${MPI_CXX_INCLUDE_PATH})  # Include MPI headers

ADD_DEFINITIONS(-D_CMAKE)
ADD_DEFINITIONS(-D_CRT_NONSTDC_NO_WARNINGS)

FILE(GLOB PROJECT_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/include/*.h ${CMAKE_CURRENT_SOURCE_DIR}/include/*.hpp)
FILE(GLOB PROJECT_SOURCES src/*.cpp)

SOURCE_GROUP("Headers" FILES ${PROJECT_HEADERS})
SOURCE_GROUP("Sources" FILES ${PROJECT_SOURCES})

ADD_EXECUTABLE(${PROJECT_NAME} ${PROJECT_HEADERS} ${PROJECT_SOURCES})

TARGET_LINK_LIBRARIES(${PROJECT_NAME} PRIVATE ${VTK_LIBRARIES} ${MPI_CXX_LIBRARIES})
vtk_module_autoinit(
    TARGETS ${PROJECT_NAME}
    MODULES ${VTK_LIBRARIES}
)
